package main

import (
	"context"
	"log"
	"testing"

	"github.com/gin-gonic/gin"

	"versionary-api/pkg/content"
	"versionary-api/pkg/email"
	"versionary-api/pkg/org"
	"versionary-api/pkg/token"
	"versionary-api/pkg/user"
)

var r = gin.New()
var userOrg org.Organization
var regularUser user.User
var regularToken string
var adminUser user.User
var adminToken string
var emailOne email.Email
var emailTwo email.Email
var emailThree email.Email
var contentOne content.Content
var contentTwo content.Content

func TestMain(m *testing.M) {
	// Initialize the application for testing
	err := api.InitMock("dev")
	if err != nil {
		log.Fatal(err)
	}

	// TODO: Populate the database with test data
	generateUsers()
	generateEmails()
	generateContent()

	// Initialize the gin router
	r.Use(gin.Recovery())
	gin.SetMode(gin.TestMode)
	gin.DisableConsoleColor()
	registerRoutes(r)

	// Run the tests
	m.Run()
}

func generateUsers() {
	ctx := context.Background()
	// Test Organization
	org, problems, err := api.OrgService.Create(ctx, org.Organization{
		Name:   "Versionary",
		Status: org.ENABLED,
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	userOrg = org

	// Regular API user (no special roles) and associated bearer token
	rUser, problems, err := api.UserService.Create(ctx, user.User{
		GivenName:  "Regular",
		FamilyName: "User",
		Email:      "info@versionary.net",
		OrgID:      userOrg.ID,
		OrgName:    userOrg.Name,
		Roles:      []string{"creator"},
		Status:     user.PENDING,
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	regularUser = rUser
	rToken, err := api.TokenService.Create(ctx, token.Token{
		UserID: rUser.ID,
		Email:  rUser.Email,
	})
	if err != nil {
		log.Fatal(err)
	}
	regularToken = rToken.ID

	// Admin API user (has admin role) and associated bearer token
	aUser, problems, err := api.UserService.Create(ctx, user.User{
		GivenName:  "Admin",
		FamilyName: "User",
		Email:      "admin@versionary.net",
		Roles:      []string{"admin"},
		OrgID:      userOrg.ID,
		OrgName:    userOrg.Name,
		Status:     user.ENABLED,
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	adminUser = aUser
	aToken, err := api.TokenService.Create(ctx, token.Token{
		UserID: aUser.ID,
		Email:  aUser.Email,
	})
	if err != nil {
		log.Fatal(err)
	}
	adminToken = aToken.ID
}

func generateEmails() {
	ctx := context.Background()
	// Test Email: admin to regular user
	email1, problems, err := api.EmailService.Create(ctx, email.Email{
		From: email.Identity{
			Name:    adminUser.FullName(),
			Address: adminUser.Email,
		},
		To: []email.Identity{
			{
				Name:    regularUser.FullName(),
				Address: regularUser.Email,
			},
		},
		Subject:  "Email from admin to regular user",
		BodyText: "This is the first email generated by the test suite.",
		Status:   email.UNSENT,
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	emailOne = email1

	// Test Email: regular user to admin
	email2, problems, err := api.EmailService.Create(ctx, email.Email{
		From: email.Identity{
			Name:    regularUser.FullName(),
			Address: regularUser.Email,
		},
		To: []email.Identity{
			{
				Name:    adminUser.FullName(),
				Address: adminUser.Email,
			},
		},
		Subject:  "Second generated email",
		BodyText: "This is the second email generated by the test suite.",
		Status:   email.UNSENT,
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	emailTwo = email2

	// Test Email: admin to unknown user
	email3, problems, err := api.EmailService.Create(ctx, email.Email{
		From: email.Identity{
			Name:    adminUser.FullName(),
			Address: adminUser.Email,
		},
		To: []email.Identity{
			{
				Name:    "Unknown User",
				Address: "unknown_user@test.net",
			},
		},
		Subject:  "Email from admin to uknown user",
		BodyText: "This email is from an admin to an unknown user.",
		Status:   email.UNSENT,
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	emailThree = email3
}

func generateContent() {
	ctx := context.Background()
	// Test Content: Book
	content1, problems, err := api.ContentService.Create(ctx, content.Content{
		Type:    content.BOOK,
		Comment: "This is a great book to learn Golang programming language.",
		Tags:    []string{"v1", "v2", "v3", "edited", "published"},
		Body: content.Section{
			Title:    "Learning Go",
			Subtitle: "An Idiomatic Approach to Real-World Go Programming",
			Text:     "This is the first book generated by the test suite.",
			Links: []content.Link{
				{
					Title: "O'Reilly",
					URL:   "https://www.oreilly.com",
				},
			},
		},
		Authors: []content.Author{
			{
				Name:  "Jon Bodner",
				Email: "corporate@oreilly.com",
				URL:   "https://www.oreilly.com",
			},
		},
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	contentOne = content1

	// Test Content: Chapter
	content2, problems, err := api.ContentService.Create(ctx, content.Content{
		Type:    content.CHAPTER,
		Comment: "This is a test comment.",
		Tags:    []string{"v1", "v2", "v3", "unpublished"},
		Authors: []content.Author{
			{
				Name:  "Test Author 1",
				Email: "testAuthor@test.com",
				URL:   "https://www.wikipedia.com",
			},
		},
		Body: content.Section{
			Title:    "Test Chapter",
			Subtitle: "Test Chapter Subtitle",
			Text:     "This is the second chapter generated by the test suite.",
			Links: []content.Link{
				{
					Title: "Test Link 1",
					URL:   "https://www.testlink1.com",
				},
			},
		},
	})
	if err != nil || len(problems) > 0 {
		log.Fatal(err)
	}
	contentTwo = content2
}
