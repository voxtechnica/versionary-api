// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/about": {
            "get": {
                "description": "Basic information about the API, including the operating environment and the current git commit.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Diagnostic"
                ],
                "summary": "Basic information about the API",
                "responses": {
                    "200": {
                        "description": "Information about the running application",
                        "schema": {
                            "$ref": "#/definitions/app.About"
                        }
                    }
                }
            }
        },
        "/commit": {
            "get": {
                "description": "Redirects to the current git commit on GitHub.",
                "produces": [
                    "text/html",
                    "application/json"
                ],
                "tags": [
                    "Diagnostic"
                ],
                "summary": "Redirect to the current git commit on GitHub",
                "responses": {
                    "307": {
                        "description": "Redirect URL",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "git commit URL"
                            }
                        }
                    },
                    "503": {
                        "description": "git commit URL unavailable",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/docs": {
            "get": {
                "description": "Show Swagger API documentation, generated from annotations in the running code.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "Diagnostic"
                ],
                "summary": "Show API documentation",
                "responses": {
                    "307": {
                        "description": "Temporary Redirect",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/echo": {
            "post": {
                "description": "Echo the request back to the client, including the provided Token and associated User.",
                "consumes": [
                    "text/plain",
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Diagnostic"
                ],
                "summary": "Echo the request back to the client",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Echoed request information",
                        "schema": {
                            "$ref": "#/definitions/main.request"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Error reading request body",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "description": "Delete the OAuth Bearer Token provided in the Authorization header (e.g. to log out).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (any role)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token that was deleted",
                        "schema": {
                            "$ref": "#/definitions/user.Token"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/user_agent": {
            "get": {
                "description": "Echo a parsed User-Agent header.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Diagnostic"
                ],
                "summary": "Echo a parsed User-Agent header",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User-Agent header",
                        "name": "user-agent",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Parsed User-Agent header",
                        "schema": {
                            "$ref": "#/definitions/user_agent.UserAgent"
                        }
                    }
                }
            }
        },
        "/v1/event_dates": {
            "get": {
                "description": "Get a list of ISO dates (e.g. yyyy-mm-dd) for which events exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "List Event Dates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dates",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/event_entity_ids": {
            "get": {
                "description": "Get a list of entity IDs for which events exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "List Event Entity IDs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity IDs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/event_entity_types": {
            "get": {
                "description": "Get a list of entity types for which events exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "List Event Entity Types",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Entity Types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/event_log_levels": {
            "get": {
                "description": "Get a list of log levels for which events exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "List Event Log Levels",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Log Levels",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/events": {
            "get": {
                "description": "List Events, paging with reverse, limit, and offset.\nOptionally, filter by date, entity ID, or log level.\nIf no filter is specified, the default is to return up to limit recent Events in reverse order.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "List Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Entity ID (a TUID)",
                        "name": "entity",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Entity Type (e.g. User, Organization, etc.)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "TRACE",
                            "DEBUG",
                            "INFO",
                            "WARN",
                            "ERROR",
                            "FATAL"
                        ],
                        "type": "string",
                        "description": "Log Level",
                        "name": "log_level",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Date (YYYY-MM-DD)",
                        "name": "date",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request (invalid parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Event.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Create a new Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request (invalid JSON body)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "422": {
                        "description": "Event validation errors",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/events/{id}": {
            "get": {
                "description": "Get Event by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Get Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete and return the specified Event.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event"
                ],
                "summary": "Delete Event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "head": {
                "description": "Check if the specified Event exists.",
                "tags": [
                    "Event"
                ],
                "summary": "Event Exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Event Exists"
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/organization_statuses": {
            "get": {
                "description": "Get a list of status codes for which organizations exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Organization Statuses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization Statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/organizations": {
            "get": {
                "description": "List Organizations, paging with reverse, limit, and offset. Optionally, filter by status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "List Organizations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "enum": [
                            "PENDING",
                            "ENABLED",
                            "DISABLED"
                        ],
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organizations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.Organization"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Create a new Organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Organization",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Newly-created Organization",
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "URL of the newly created Organization"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid JSON body)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "422": {
                        "description": "Organization validation errors",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{id}": {
            "get": {
                "description": "Get Organization by ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization",
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the provided, complete Organization.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Update Organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Organization",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization",
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid JSON or parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "422": {
                        "description": "Organization validation errors",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete and return the specified Organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Delete Organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization that was deleted",
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "head": {
                "description": "Check if the specified Organization exists.",
                "tags": [
                    "Organization"
                ],
                "summary": "Organization Exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Organization Exists"
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{id}/versions": {
            "get": {
                "description": "Get Organization Versions by ID, paging with reverse, limit, and offset.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Organization Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization Versions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.Organization"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/organizations/{id}/versions/{versionid}": {
            "get": {
                "description": "Get Organization Version by ID and VersionID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get Organization Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization VersionID",
                        "name": "versionid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization Version",
                        "schema": {
                            "$ref": "#/definitions/user.Organization"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "head": {
                "description": "Check if the specified Organization version exists.",
                "tags": [
                    "Organization"
                ],
                "summary": "Organization Version Exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Organization VersionID",
                        "name": "versionid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Organization Version Exists"
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/token_user_ids": {
            "get": {
                "description": "List User IDs for which tokens exist. This is useful for paging through tokens by user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "List User IDs for which tokens exist",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 1000)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Paginated User IDs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid query parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/tokens": {
            "get": {
                "description": "List OAuth Bearer Tokens by User ID (defaults to the Context User).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "List Tokens",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (any role)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID or Email (defaults to the Context User)",
                        "name": "user",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tokens",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.Token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid User ID or Email)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Forbidden (only administrators may read any user's tokens)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new OAuth Bearer Token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Create a new Token",
                "parameters": [
                    {
                        "description": "Token Request",
                        "name": "TokenRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.TokenRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Token Response",
                        "schema": {
                            "$ref": "#/definitions/user.TokenResponse"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "URL of the newly created Token"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid JSON body)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthorized (invalid username or password)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/tokens/{id}": {
            "get": {
                "description": "Read OAuth Bearer Token by ID (e.g. to verify a token has not expired).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Read Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (any role)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "$ref": "#/definitions/user.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Forbidden (only administrators may read any user's tokens)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found (Token not found)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete OAuth Bearer Token by ID (e.g. to log out).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Token"
                ],
                "summary": "Delete Token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (any role)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Token ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token that was deleted",
                        "schema": {
                            "$ref": "#/definitions/user.Token"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Forbidden (only administrators may delete any user's tokens)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found (Token not found)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/tuids": {
            "get": {
                "description": "Generate the specified number of TUIDs, based on the current system time.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TUID"
                ],
                "summary": "Generate the specified number of TUIDs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of TUIDs (default: 5)",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TUIDInfo for the generated TUIDs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/tuid.TUIDInfo"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid limit",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "post": {
                "description": "Generate a new TUID based on current system time and return the TUIDInfo.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TUID"
                ],
                "summary": "Generate a new TUID",
                "responses": {
                    "201": {
                        "description": "TUIDInfo for the generated TUID",
                        "schema": {
                            "$ref": "#/definitions/tuid.TUIDInfo"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "URL of the newly created TUID"
                            }
                        }
                    }
                }
            }
        },
        "/v1/tuids/{id}": {
            "get": {
                "description": "Parse the provided TUID, returning the TUIDInfo. This can be useful for extracting the timestamp from an ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "TUID"
                ],
                "summary": "Read TUIDInfo for the provided TUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TUID to parse (e.g. 9GEG9f25zjGI3ath)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TUIDInfo for the provided TUID",
                        "schema": {
                            "$ref": "#/definitions/tuid.TUIDInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid TUID",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/user_emails": {
            "get": {
                "description": "Get a paginated list of email addresses for which users exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List User Email Addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email Addresses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/user_org_ids": {
            "get": {
                "description": "Get a list of Organization IDs for which users exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List User Organization IDs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization IDs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/user_roles": {
            "get": {
                "description": "Get a list of roles for which users exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List User Roles",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Roles",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/user_statuses": {
            "get": {
                "description": "Get a list of status codes for which users exist.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List User Statuses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Statuses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/users": {
            "get": {
                "description": "List Users, paging with reverse, limit, and offset.\nOptionally, filter by email, organization, role, or status.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List Users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email Address",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "org",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Role (e.g. admin)",
                        "name": "role",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "PENDING",
                            "ENABLED",
                            "DISABLED"
                        ],
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new User.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Create a new User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Newly-created User",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        },
                        "headers": {
                            "Location": {
                                "type": "string",
                                "description": "URL of the newly created User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid JSON body)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "422": {
                        "description": "User validation errors",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}": {
            "get": {
                "description": "Get User by ID or email, scrubbing sensitive information if the requester is not an administrator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID or Email Address",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Forbidden (only administrators may read any user)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the provided complete User, ensuring that sensitive information is retained.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid JSON or parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "422": {
                        "description": "User validation errors",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete and return the specified User. Attempt to delete their associated Tokens as well, logging errors.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User that was deleted",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "head": {
                "description": "Check if the specified User exists.",
                "tags": [
                    "User"
                ],
                "summary": "User Exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User Exists"
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}/versions": {
            "get": {
                "description": "Get User Versions by User ID, paging with reverse, limit, and offset.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "List User Versions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token (Administrator)",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Reverse Order (default: false)",
                        "name": "reverse",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit (default: 100)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset (default: forward/reverse alphanumeric)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Versions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter ID)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        },
        "/v1/users/{id}/versions/{versionid}": {
            "get": {
                "description": "Get User Version by ID and VersionID, scrubbing sensitive information if the requester is not an administrator.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Version",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth Bearer Token",
                        "name": "authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User VersionID",
                        "name": "versionid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Version",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "401": {
                        "description": "Unauthenticated (missing or invalid Authorization header)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "403": {
                        "description": "Unauthorized (not an Administrator)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            },
            "head": {
                "description": "Check if the specified User version exists.",
                "tags": [
                    "User"
                ],
                "summary": "User Version Exists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "User VersionID",
                        "name": "versionid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User Version Exists"
                    },
                    "400": {
                        "description": "Bad Request (invalid path parameter)",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.APIEvent"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "app.About": {
            "type": "object",
            "properties": {
                "buildTime": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "environment": {
                    "type": "string"
                },
                "gitHash": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "main.APIEvent": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "eventID": {
                    "type": "string"
                },
                "logLevel": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            }
        },
        "main.params": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "string"
                },
                "reverse": {
                    "type": "boolean"
                }
            }
        },
        "main.request": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "contentLength": {
                    "type": "integer"
                },
                "header": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "host": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "params": {
                    "$ref": "#/definitions/main.params"
                },
                "proto": {
                    "type": "string"
                },
                "remoteAddr": {
                    "type": "string"
                },
                "requestURI": {
                    "type": "string"
                },
                "token": {
                    "$ref": "#/definitions/user.Token"
                },
                "trailer": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "transferEncoding": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user.User"
                }
            }
        },
        "tuid.TUIDInfo": {
            "type": "object",
            "properties": {
                "entropy": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "user.Organization": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "versionID": {
                    "type": "string"
                }
            }
        },
        "user.Token": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "user.TokenRequest": {
            "type": "object",
            "properties": {
                "grantType": {
                    "description": "usually \"password\"",
                    "type": "string"
                },
                "password": {
                    "description": "plaintext password",
                    "type": "string"
                },
                "username": {
                    "description": "email or User ID",
                    "type": "string"
                }
            }
        },
        "user.TokenResponse": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "description": "Token ID (a tuid.TUID)",
                    "type": "string"
                },
                "expiresAt": {
                    "description": "when the token expires (DynamoDB TTL)",
                    "type": "string"
                },
                "tokenType": {
                    "description": "usually \"Bearer\"",
                    "type": "string"
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "orgID": {
                    "type": "string"
                },
                "orgName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "passwordHash": {
                    "type": "string"
                },
                "passwordReset": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "versionID": {
                    "type": "string"
                }
            }
        },
        "user_agent.UserAgent": {
            "type": "object",
            "properties": {
                "clientName": {
                    "description": "ClientName indicates the application name (Chrome, Googlebot, Edge, etc.)",
                    "type": "string"
                },
                "clientType": {
                    "description": "ClientType indicates the application category (App, Bot, Browser, or Other)",
                    "type": "string"
                },
                "clientVersion": {
                    "description": "ClientVersion indicates the extractVersion of the application, if provided",
                    "type": "string"
                },
                "deviceType": {
                    "description": "DeviceType indicates the general device category (Desktop, Mobile, Tablet, Other)",
                    "type": "string"
                },
                "fields": {
                    "description": "Fields contains parsed/cleaned segments of the User-Agent request header, used for analysis",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "header": {
                    "description": "Header is the provided User-Agent request header",
                    "type": "string"
                },
                "osName": {
                    "description": "OSName indicates the operating system running on the device (Android, Linux, iOS, macOS, Windows, etc.)",
                    "type": "string"
                },
                "osVersion": {
                    "description": "OSVersion indicates the operating system version, if available",
                    "type": "string"
                },
                "url": {
                    "description": "URL indicates the URL provided, typically for information about a bot/crawler.",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
