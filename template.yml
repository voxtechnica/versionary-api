AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Versionary API and Lambda Function
Parameters:
  ENV:
    Type: String
    Description: Operating Environment (dev, qa, staging, prod)
Conditions:
  ProductionBuild: !Equals [!Ref AWS::StackName, versionary-api-prod]
  NonProductionBuild: !Not [!Condition ProductionBuild]
Resources:
  ### Lambda Function

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LambdaServicePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:*
                  - dynamodb:*
                  - lambda:*
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ses:*
                  - sqs:*
                  - ssm:*
                  - s3:*
                Resource: "*"

  VersionaryAPILambda:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      Handler: bootstrap
      Runtime: provided.al2
      CodeUri: ./lambda.zip
      Description: !Join ["-", ["versionary-api", !Ref ENV]]
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaServiceRole.Arn
      Environment:
        Variables:
          STAGE_NAME: !Ref ENV
          SERVICE_NAME: versionary-api

  VersionaryAPILambdaArnParameter:
    DependsOn: VersionaryAPILambda
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ["-", ["/versionary/api-arn", !Ref ENV]]
      Description: Versionary API ARN
      Type: String
      Value: !GetAtt VersionaryAPILambda.Arn

  ### API Gateway

  VersionaryAPIHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Join ["-", ["versionary-api", !Ref ENV]]
      Description: Versionary API
      ProtocolType: HTTP

  VersionaryAPIHttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref VersionaryAPIHttpApi
      ConnectionType: INTERNET
      Description: Versionary API Lambda Integration
      IntegrationMethod: POST
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt VersionaryAPILambda.Arn
      PayloadFormatVersion: "2.0"
      TimeoutInMillis: 30000

  VersionaryAPIHttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref VersionaryAPIHttpApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      RouteKey: "ANY /{proxy+}"
      Target: !Sub "integrations/${VersionaryAPIHttpApiIntegration}"

  VersionaryAPIHttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref VersionaryAPIHttpApi
      AutoDeploy: true
      Description: Versionary API Default Stage
      StageName: "$default"

  VersionaryAPIHttpApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref VersionaryAPILambda
      SourceArn: !Sub
        - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/*/*"
        - ApiId: !Ref VersionaryAPIHttpApi

  VersionaryAPIUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join ["-", ["/versionary/api-url", !Ref ENV]]
      Description: Versionary API URL
      Type: String
      Value: !Sub "https://${VersionaryAPIHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
